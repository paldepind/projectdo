#!/bin/sh

# projectdo â€“ universal project commands.
# Copyright (C) 2019-present  Simon Friis Vindum

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

VERSION="1.0.1"

# Global mutable variables.
QUIET=false
DRY_RUN=false
PROJECT_ROOT="${PROJECT_ROOT:-}"
ACTION=""
TOOL_ARGS=""  # Arguments to pass along to the tool
IS_TOOL=false # True if ACTION is 'tool' as this action is somewhat special.

# Check if a command is available.
has_command() {
  command -v "$1" >/dev/null 2>&1
}

# Check if a command is available, if not print an error message and exit.
has_command_or_error() {
  # If this is a dry run, we don't check whether the command is available.
  if [ $DRY_RUN = false ] && ! has_command "$1"; then
    tool_name="$3"
    if [ -z "$tool_name" ]; then
      tool_name="$1"
    fi
    echo "Found a '$2' file but '$tool_name' is not installed."
    exit 1
  fi
}

# Output the global `ACTION` variable with a translation applied. A translation
# has the form `action=translation`. The shortcut `action` is equivalent to
# `action=action`. If no translation applies then a non-zero status code is
# returned. The `tool` action is not subject to translations.
translate_action() {
  if $IS_TOOL; then
    echo tool
    return
  fi
  for arg in "$@"; do
    case "$arg" in
    $ACTION)
      echo "$arg"
      return 0
      ;;
    ${ACTION}=*)
      # Pick out the part after the `=`
      echo "$arg" | sed "s/${ACTION}=\(.*\)/\1/"
      return 0
      ;;
    esac
  done
  echo ""
  return 1
}

# When running the appropriate external tool this function is used which
# evaluates the given command while respecting $QUIET and $DRY_RUN.
# shellcheck disable=SC2086
execute() {
  if [ $QUIET = false ]; then
    echo "$1" $TOOL_ARGS
  fi
  if [ $DRY_RUN = false ]; then
    if [ $QUIET = false ]; then
      eval "$1" $TOOL_ARGS
    else
      eval "$1" $TOOL_ARGS >/dev/null
    fi
  fi
}

# Takes the name of a tool and an optional action. If the action is `tool` it is
# ignored. It handles the common case where the tool is invoked as `tool
# action`.
execute_command() {
  if [ "$2" = tool ] || [ -z "$2" ]; then
    execute "$1"
  else
    execute "$1 $2"
  fi
  exit 0
}

# Navigate up one directory. The command is successful if this is possible
# without leaving the current project, entering the home directory, or entering
# the root directory.
go_up() {
  if [ "$PWD" = "$PROJECT_ROOT" ]; then
    return 1
  fi
  cd ..
  if [ "$PWD" = "$HOME" ] || [ "$PWD" = / ]; then
    return 1
  fi
  return 0
}

# Every supported tool requires a function `try_tool` where `tool` is a name
# indicating what tool the function tries to detect. The function should:
#
# * Return if it does not detect that the tool is appropriate.
# * Read the variables `ACTION` and `IS_TOOL` to determine the correct action
#   to run.
# * When running an action is should use the `execute` function and _exit_ when
#   it is done.

# Start list of tools

# JavaScript + NodeJS

# After a `package.json` has been found this detects the tool to use based on
# any present lock file. In monorepo setups the lockfile might be in a parent
# directory and not right next to the `package.json` file. This is handled by
# looking up the directory hierarchy.
detect_nodejs_tool() {
  while :; do
    if [ -f package-lock.json ]; then
      echo yarn
      return
    elif [ -f bun.lock ] || [ -f bun.lockb ]; then
      echo bun
      return
    elif [ -f yarn.lock ]; then
      echo yarn
      return
    elif [ -f pnpm-lock.yaml ]; then
      echo pnpm
      return
    fi
    if ! go_up; then
      echo npm
      return
    fi
  done
}

try_nodejs() {
  if [ ! -f package.json ]; then
    return 1
  fi
  tool=$(detect_nodejs_tool)
  has_command_or_error "$tool" package.json
  node_action=$(translate_action build run=start test)
  # We check if the package.json file contains an appropriate script. We use
  # grep for this. The check is not 100% bulletproof, but it's very close. We
  # could've used `npm run` to get the authorative list of the scripts but
  # invoking `npm` is two orders of magnitude slower which leads to a
  # noticeable delay.
  if ! $IS_TOOL && ! grep -q "^[[:space:]]*\"${node_action}\":" package.json; then
    return 0
  fi
  if [ "$ACTION" = build ]; then
    execute_command "$tool" "run build"
  else
    execute_command "$tool" "$node_action"
  fi
}

# Rust + Cargo

try_cargo() {
  if [ -f Cargo.toml ]; then
    has_command_or_error cargo Cargo.toml
    execute_command cargo "$ACTION"
  fi
}

# Meson

try_meson() {
  if [ -f meson.build ]; then
    has_command_or_error meson meson.build
    action=$(translate_action test build=compile)
    if [ $? -eq 0 ]; then
      execute_command meson "$action"
    fi
  fi
}

# CMake

try_cmake() {
  if [ -f CMakeLists.txt ]; then
    case $ACTION in
    test)
      if [ -f build ]; then
        execute_command cmake "--build build --target test"
      else
        execute_command cmake "--build . --target test"
      fi
      ;;
    tool) execute_command cmake tool ;;
    esac
  fi
}

# Haskell + Stack

try_stack() {
  if [ -f package.yaml ] && [ -f stack.yaml ]; then
    has_command_or_error stack package.yaml
    execute_command stack "$ACTION"
  fi
}

# Haskell + Cabal

try_cabal() {
  cabal_file="$(find ./ -maxdepth 1 -name "*.cabal" 2>/dev/null | wc -l)"
  if [ "$cabal_file" -gt 0 ] && [ ! -f stack.yml ]; then
    has_command_or_error cabal cabal
    execute_command cabal "$ACTION"
  fi
}

# Maven

try_maven() {
  if [ -f pom.xml ]; then
    action=$(translate_action test build=compile)
    if [ $? -eq 0 ]; then
      has_command_or_error mvn pom.xml maven
      execute_command mvn "$action"
    fi
  fi
}

# Gradle

try_gradle() {
  if [ -f build.gradle ] || [ -f build.gradle.kts ]; then
    has_command_or_error gradle build.gradle
    execute_command gradle "$ACTION"
  fi
}

# Clojure + Leiningen

try_lein() {
  if [ -f project.clj ]; then
    if [ "$ACTION" = build ]; then
      echo "projectdo does not know how to build a project with Leiningen."
      exit
    fi
    has_command_or_error lein project.clj
    execute_command lein "$ACTION"
  fi
}

# justfile

try_justfile() {
  if [ -f justfile ]; then
    has_command_or_error just justfile
    execute_command just "$ACTION"
  fi
}

# Makefile

has_make_target() {
  target="${1?}"
  output=$(make -n "${target}" 2>&1)
  exit_code=$?
  if [ $exit_code -ne 0 ]; then
    return $exit_code
  fi

  # If there is a file with the name of the target we're looking for but no
  # actual target with that name, make will exit successfully with that
  # message. We need to consider that case as a "target not found". Note that
  # the way the target is quoted in the output (`test' vs 'test') can differ
  # across OSes so we only check a prefix up to the problematic quotes.
  if expr "$output" : "make: Nothing to be done for" 1>/dev/null; then
    return 1
  fi

  return 0
}

try_makefile() {
  if [ -f Makefile ]; then
    has_command_or_error make Makefile
    if $IS_TOOL || [ "$ACTION" = build ]; then
      # For make "build" is the default action when running `make`
      execute_command "make"
    elif [ "$ACTION" = test ]; then
      # Let's see if the makefile contains a test or check target
      if has_make_target "test"; then
        execute_command make test
      elif has_make_target "check"; then
        execute_command make check
      fi
    fi
  fi
  return 1
}

# Nix (Flake)

try_nix_flake() {
  if [ -f flake.nix ]; then
    has_command_or_error nix flake.nix
    action=$(translate_action "test=flake check" build run)
    execute_command nix "$action"
  fi
  return 1
}

# Nix (package)

try_nix_package() {
  if [ -f default.nix ]; then
    has_command_or_error nix-build default.nix
    action=$(translate_action build=)
    execute_command nix-build "$action"
  fi
  return 1
}

# Python

try_python() {
  if [ -f pyproject.toml ]; then
    if grep -q -m 1 "^\[tool.poetry\]$" pyproject.toml; then
      action=$(translate_action build "test=run pytest")
      if [ $? -eq 0 ]; then
        execute_command poetry "$action"
      fi
    else
      if [ -f uv.lock ]; then
        case $ACTION in
        build | test)
          echo "projectdo does not know how to $ACTION a project with uv."
          exit
          ;;
        run | tool) execute_command uv "$ACTION" ;;
        esac
      else
        echo "Found a pyproject.toml file but projectdo is not sure how to run it."
        exit
      fi
    fi
    return 1
  fi
}

# Go

try_go() {
  # We detect Makefiles before we detect Go, so here we know that the Go project
  # is not tested by a Makefile.
  if [ -f go.mod ]; then

    # Check if the project uses Mage. A magefile could in theory have any name,
    # but `magefile.go` seems to be the convention.
    if [ "$ACTION" = test ] && [ -f magefile.go ]; then

      if grep -q -m 1 '^func Check(' magefile.go; then
        execute_command mage check
      elif grep -q -m 1 '^func Test(' magefile.go; then
        execute_command mage test
      fi
    fi
    execute_command go "$ACTION"
  fi
}

# LaTeX

try_latex() {
  if [ -f Tectonic.toml ]; then
    case $ACTION in
    build) execute_command tectonic "-X build" ;;
    tool) execute_command tectonic ;;
    esac
  fi
}

# .NET

try_dotnet() {
  if [ -n "$(find . -maxdepth 1 \( -name '*.csproj' -o -name '*.fsproj' -o -name '*.sln' \) -print -quit)" ]; then
    execute_command dotnet "$ACTION"
  fi
}

# OCaml + Dune

try_dune() {
  if [ -f dune-project ]; then
    case $ACTION in
    test)
      execute_command dune runtest
      ;;
    run)
      execute_command dune exec
      ;;
    build | tool)
      execute_command dune "$ACTION"
      ;;
    esac
  fi
}

# Lean + Lake

try_lake() {
  if [ -f lakefile.lean ] || [ -f lakefile.toml ]; then
    has_command_or_error lake lakefile.lean
    execute_command lake "$ACTION"
  fi
}

# Any / Generic

try_build_script() {
  if [ "$ACTION" = build ]; then
    if [ -f ./build.sh ]; then
      execute "sh -c build.sh"
      exit
    fi
  fi
}

# End of list of tools

detect_and_run() {
  try_justfile
  try_makefile
  try_nodejs
  try_cargo
  try_stack
  try_cabal
  try_meson
  try_cmake
  try_maven
  try_gradle
  try_lein
  try_nix_flake
  try_nix_package
  try_python
  try_go
  try_latex
  try_dotnet
  try_dune
  try_lake
  try_build_script
}

set_project_root() {
  if [ -n "$PROJECT_ROOT" ]; then
    return
  fi

  if has_command git; then
    # Find the root of the git repository if we're inside one. If we're in a
    # git submodule then the root of the outer git repo is used. If we're not
    # in a git repo the git command will not output anything and $PROJECT_ROOT
    # is set to the empty string which is fine.
    PROJECT_ROOT=$(git rev-parse --show-superproject-working-tree --show-toplevel 2>/dev/null | head -n 1)
  fi
}

nothing_found() {
  echo "No way to $ACTION found :'("
  exit 1
}

display_version() {
  echo "$(basename "$0") version $VERSION"
}

display_help() {
  echo "Usage: $(basename "$0") [options] [action] [tool-arguments]
Options:
  -h, --help             Display this help.
  -n, -d, --dry-run      Do not execute any commands with side-effects.
  -q, --quiet            Do not print commands as they are about to be executed.
  -v, --version          Display the version of the program (which is $VERSION).

Actions:
  build, run, test       Build, run, or test the current project.
  tool                   Invoke the guessed tool for the current project.

Tool arguments:
  Any arguments following [action] are passed along to the invoked tool."
}

# Main execution starts here

while getopts dhnqv-: c; do
  case $c in
  d) DRY_RUN=true ;;
  h)
    display_help
    exit 0
    ;;
  n) DRY_RUN=true ;;
  q) QUIET=true ;;
  v)
    display_version
    exit 0
    ;;
  -) case $OPTARG in
    help)
      display_help
      exit 0
      ;;
    dry-run) DRY_RUN=true ;;
    quiet) QUIET=true ;;
    version)
      display_version
      exit 0
      ;;
    '') break ;; # "--" should terminate argument processing
    *)
      echo "Illegal option --$OPTARG" >&2
      exit 1
      ;;
    esac ;;
  \?) exit 1 ;;
  esac
done

shift $((OPTIND - 1)) # Shift away the parsed option arguments

if [ "$1" = test ] ||
  [ "$1" = run ] ||
  [ "$1" = build ] ||
  [ "$1" = tool ]; then
  ACTION=$1
  if [ "$1" = tool ]; then
    IS_TOOL=true
  fi
  shift 1 # Remove the action from the arguments
  # shellcheck disable=SC2124
  TOOL_ARGS=$@
else
  if [ -z "$1" ]; then
    echo "No action specified."
  else
    echo "$1 is not a valid action."
  fi
  echo ""
  echo "The valid actions are: build, run, test, tool"
  echo ""
  echo "Example: projectdo test"
  exit 1
fi

set_project_root

while :; do
  detect_and_run
  # If we didn't detect a tool to run in this directory we go up one directory
  if ! go_up; then
    nothing_found
  fi
done
